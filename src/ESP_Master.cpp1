/*
SENDER
*/
//#include <esp_wifi.h>
#include <esp_now.h>                                   // needed to receive transmit between ESP
#include <WiFi.h>                                      // needed for conenctin to WI-FI
#include "time.h"                                      // needed for get time 
#include <WebServer.h>                                // needed to create a simple webserver
#include <WebSocketsServer.h>                         // needed for instant communication between client and server through Websockets
#include <ArduinoJson.h>                              // needed for JSON encapsulation (send multiple variables with one string)
#include <AT24Cxx.h>

#define i2c_address 0x50
#define I2C_SDA 21
#define I2C_SCL 22

union unionFloat{
  float f;
  byte b[4];
};
union unionInt{
  int i;
  byte b[4];
};

AT24Cxx eep(i2c_address, 100);

//ssid = wifi name / password
const char * ssid = "DIGI-2.5GHz";
const char * password = "rockycheese250";

///////////////////////////////////////Global WEB Management//////////////////////////////////////////

void EEPROM_UpdateInt(uint16_t address, int value){
    unionInt my_data;
  my_data.i = value;
  //Serial.println("Written data b:");
  for(int i = 0; i < 4; i++){
    eep.update(address, my_data.b[i]);     
		address++;
    //Serial.print(my_data.b[i]);
    //Serial.print(" ");
  }
  //Serial.println();
  //Serial.println("Written data f:");
  //Serial.println(my_data.f);
}

void EEPROM_UpdateFloat(uint16_t address, float value){
    unionFloat my_data;
  my_data.f = value;
  //Serial.println("Written data b:");
  for(int i = 0; i < 4; i++){
    eep.update(address, my_data.b[i]);     
		address++;
    //Serial.print(my_data.b[i]);
    //Serial.print(" ");
  }
  //Serial.println();
  //Serial.println("Written data f:");
  //Serial.println(my_data.f);
}

float EEPROM_ReadFloat(uint16_t address){
  unionFloat my_data;
  //Serial.println("Read data b: ");
  for(int i = 0; i < 4; i++){
	  my_data.b[i] = eep.read(address);
    address++;
    //Serial.print(my_data.b[i]);
    //Serial.print(" ");
  }
  //Serial.println();
  //Serial.println("Read data f: ");
  //Serial.println(my_data.f);
  return (my_data.f);
}

// The String below "webpage" contains the complete HTML code that is sent to the client whenever someone connects to the webserver
String webpage = "<!DOCTYPE html><html><head><title>Controler Ambiental</title><style>tt {width: 21px;border-color: 255;}[tth]tr {height: 40px;}</style></head><body style='background-color: #EEEEEE;'><span style='color: #003366;'><h1>Controler centrala Termica <span id='datetime'>-</span></h1><p>Temperatura actuala: <span id='rand1'>-</span> Umiditate relativa: <span id='rand2'>-</span></p><p>Status Centrala: <span id='StatusCentrala'>-</span> Program: <span id='Program'>-</span></p><p>Offset Temperatura: <input id='OffsetTemp' size='2' /></p><p><button type='button' id='BTN_SEND_BACK'>Send data to ESP32</button> <button type='button' id='BTN_RECEIVE'>Receive data from ESP32</button></p><table style='height: 298px; border-style: solid; width: 575px; float: left;' border='1' width='664'><tbody><tr style='height: 34px;'><td style='width: 88.7667px; height: 34px; text-align: center;' colspan='2'><strong><em><span style='text-decoration: underline;'>Luni</span></em></strong></td><td style='width: 88.7667px; height: 34px; text-align: center;' colspan='2'><strong><em><span style='text-decoration: underline;'>Marti</span></em></strong></td><td style='width: 88.7667px; height: 34px; text-align: center;' colspan='2'><strong><em><span style='text-decoration: underline;'>Miercuri</span></em></strong></td><td style='width: 88.7667px; height: 34px; text-align: center;' colspan='2'><strong><em><span style='text-decoration: underline;'>Joi</span></em></strong></td><td style='width: 88.7667px; height: 34px; text-align: center;' colspan='2'><strong><em><span style='text-decoration: underline;'>Vineri</span></em></strong></td><td style='width: 88.7667px; height: 34px; text-align: center;' colspan='2'><strong><em><span style='text-decoration: underline;'>Sambata</span></em></strong></td><td style='width: 88.7667px; height: 34px; text-align: center;' colspan='2'><strong><em><span style='text-decoration: underline;'>Duminica</span></em></strong></td></tr><tr id='tth' class='tth' style='height: 21px;'><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 1</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 1</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 1</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 1</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 1</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 1</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 1</strong></td></tr><tr id='tth' style='height: 47px;'><td style='width: 88.7667px; height: 10px;' colspan='2'><span style='color: #00ff00; --darkreader-inline-color: #ff1a1a;' data-darkreader-inline-color=''><em>Start 00:00</em></span></td><td style='width: 88.7667px; height: 10px;' colspan='2'><span style='color: #00ff00; --darkreader-inline-color: #ff1a1a;' data-darkreader-inline-color=''><em>Start 00:00</em></span></td><td style='width: 88.7667px; height: 10px;' colspan='2'><span style='color: #00ff00; --darkreader-inline-color: #ff1a1a;' data-darkreader-inline-color=''><em>Start 00:00</em></span></td><td style='width: 88.7667px; height: 10px;' colspan='2'><span style='color: #00ff00; --darkreader-inline-color: #ff1a1a;' data-darkreader-inline-color=''><em>Start 00:00</em></span></td><td style='width: 88.7667px; height: 10px;' colspan='2'><span style='color: #00ff00; --darkreader-inline-color: #ff1a1a;' data-darkreader-inline-color=''><em>Start 00:00</em></span></td><td style='width: 88.7667px; height: 10px;' colspan='2'><span style='color: #00ff00; --darkreader-inline-color: #ff1a1a;' data-darkreader-inline-color=''><em>Start 00:00</em></span></td><td style='width: 88.7667px; height: 10px;' colspan='2'><span style='color: #00ff00; --darkreader-inline-color: #ff1a1a;' data-darkreader-inline-color=''><em>Start 00:00</em></span></td></tr><tr class='tth' style='height: 21px;'><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td></tr><tr class='tth' style='height: 21px;'><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_1_1' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_1_2' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_1_3' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_1_4' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_1_5' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_1_6' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_1_7' size='2' type='text' /></td></tr><tr class='tth' style='height: 21px;'><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 2</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 2</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 2</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 2</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 2</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 2</strong></td><td style='width: 88.7667px; height: 21px;' colspan='2'><strong>Program 2</strong></td></tr><tr class='tth' style='height: 21px;'><td style='width: 40.6px; height: 10px;'><input id='hVal_2_1' size='2' type='text' /></td><td style='width: 42.5667px; height: 10px;'><input id='mVal_2_1' size='2' type='text' /></td><td style='width: 40.6px; height: 10px;'><input id='hVal_2_2' size='2' type='text' /></td><td style='width: 42.5667px; height: 10px;'><input id='mVal_2_2' size='2' type='text' /></td><td style='width: 41.5833px; height: 10px;'><input id='hVal_2_3' size='2' type='text' /></td><td style='width: 41.5833px; height: 10px;'><input id='mVal_2_3' size='2' type='text' /></td><td style='width: 41.5833px; height: 10px;'><input id='hVal_2_4' size='2' type='text' /></td><td style='width: 41.5833px; height: 10px;'><input id='mVal_2_4' size='2' type='text' /></td><td style='width: 41.5833px; height: 10px;'><input id='hVal_2_5' size='2' type='text' /></td><td style='width: 41.5833px; height: 10px;'><input id='mVal_2_5' size='2' type='text' /></td><td style='width: 41.5833px; height: 10px;'><input id='hVal_2_6' size='2' type='text' /></td><td style='width: 41.5833px; height: 10px;'><input id='mVal_2_6' size='2' type='text' /></td><td style='width: 41.5833px; height: 10px;'><input id='hVal_2_7' size='2' type='text' /></td><td style='width: 41.5833px; height: 10px;'><input id='mVal_2_7' size='2' type='text' /></td></tr><tr class='tth' style='height: 21px;'><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td></tr><tr class='tth' style='height: 21px;'><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_2_1' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_2_2' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_2_3' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_2_4' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_2_5' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_2_6' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_2_7' size='2' type='text' /></td></tr><tr class='tth' style='height: 28px;'><td style='width: 88.7667px; height: 28px;' colspan='2'><strong>Program 3</strong></td><td style='width: 88.7667px; height: 28px;' colspan='2'><strong>Program 3</strong></td><td style='width: 88.7667px; height: 28px;' colspan='2'><strong>Program 3</strong></td><td style='width: 88.7667px; height: 28px;' colspan='2'><strong>Program 3</strong></td><td style='width: 88.7667px; height: 28px;' colspan='2'><strong>Program 3</strong></td><td style='width: 88.7667px; height: 28px;' colspan='2'><strong>Program 2</strong></td><td style='width: 88.7667px; height: 28px;' colspan='2'><strong>Program 3</strong></td></tr><tr class='tth' style='height: 21px;'><td style='width: 40.6px; height: 27px;'><input id='hVal_3_1' size='2' type='text' /></td><td style='width: 42.5667px; height: 27px;'><input id='mVal_3_1' size='2' type='text' /></td><td style='width: 40.6px; height: 27px;'><input id='hVal_3_2' size='2' type='text' /></td><td style='width: 42.5667px; height: 27px;'><input id='mVal_3_2' size='2' type='text' /></td><td style='width: 41.5833px; height: 27px;'><input id='hVal_3_3' size='2' type='text' /></td><td style='width: 41.5833px; height: 27px;'><input id='mVal_3_3' size='2' type='text' /></td><td style='width: 41.5833px; height: 27px;'><input id='hVal_3_4' size='2' type='text' /></td><td style='width: 41.5833px; height: 27px;'><input id='mVal_3_4' size='2' type='text' /></td><td style='width: 41.5833px; height: 27px;'><input id='hVal_3_5' size='2' type='text' /></td><td style='width: 41.5833px; height: 27px;'><input id='mVal_3_5' size='2' type='text' /></td><td style='width: 41.5833px; height: 27px;'><input id='hVal_3_6' size='2' type='text' /></td><td style='width: 41.5833px; height: 27px;'><input id='mVal_3_6' size='2' type='text' /></td><td style='width: 41.5833px; height: 27px;'><input id='hVal_3_7' size='2' type='text' /></td><td style='width: 41.5833px; height: 27px;'><input id='mVal_3_7' size='2' type='text' /></td></tr><tr class='tth' style='height: 21px;'><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td><td style='width: 88.7667px; height: 21px;' colspan='2'>Temperatura</td></tr><tr class='tth' style='height: 21px;'><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_3_1' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_3_2' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_3_3' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_3_4' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_3_5' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_3_6' size='2' type='text' /></td><td style='width: 88.7667px; height: 21px;' colspan='2'><input id='tVal_3_7' size='2' type='text' /></td></tr><tr class='tth' style='height: 21px;'><td style='width: 88.7667px; height: 21px;' colspan='2'><span style='color: #ff0000;' data-darkreader-inline-color=''><em>Stop 23:59</em></span></td><td style='width: 88.7667px; height: 21px;' colspan='2'><span style='color: #ff0000;' data-darkreader-inline-color=''><em>Stop 23:59</em></span></td><td style='width: 88.7667px; height: 21px;' colspan='2'><span style='color: #ff0000;' data-darkreader-inline-color=''><em>Stop 23:59</em></span></td><td style='width: 88.7667px; height: 21px;' colspan='2'><span style='color: #ff0000;' data-darkreader-inline-color=''><em>Stop 23:59</em></span></td><td style='width: 88.7667px; height: 21px;' colspan='2'><span style='color: #ff0000;' data-darkreader-inline-color=''><em>Stop 23:59</em></span></td><td style='width: 88.7667px; height: 21px;' colspan='2'><span style='color: #ff0000;' data-darkreader-inline-color=''><em>Stop 23:59</em></span></td><td style='width: 88.7667px; height: 21px;' colspan='2'><span style='color: #ff0000;' data-darkreader-inline-color=''><em>Stop 23:59</em></span></td></tr></tbody><!-- DivTable.com --></table></span></body><script> var Socket; document.getElementById('BTN_SEND_BACK').addEventListener('click', button_send_back); document.getElementById('BTN_RECEIVE').addEventListener('click', button_receive); function init() { Socket = new WebSocket('ws://' + window.location.hostname + ':81/'); Socket.onmessage = function(event) { processCommand(event); }; } function button_send_back() { var msg = { type: Request; }; Socket.send(JSON.stringify(msg)); } var OffsetTemp = document.getElementById('OffsetTemp');var tVal_1_1 = document.getElementById('tVal_1_1');var hVal_2_1 = document.getElementById('hVal_2_1');var mVal_2_1 = document.getElementById('mVal_2_1');var tVal_2_1 = document.getElementById('tVal_2_1');var hVal_3_1 = document.getElementById('hVal_3_1');var mVal_3_1 = document.getElementById('mVal_3_1');var tVal_3_1 = document.getElementById('tVal_3_1');var tVal_1_2 = document.getElementById('tVal_1_2');var hVal_2_2 = document.getElementById('hVal_2_2');var mVal_2_2 = document.getElementById('mVal_2_2');var tVal_2_2 = document.getElementById('tVal_2_2');var hVal_3_2 = document.getElementById('hVal_3_2');var mVal_3_2 = document.getElementById('mVal_3_2');var tVal_3_2 = document.getElementById('tVal_3_2');var tVal_1_3 = document.getElementById('tVal_1_3');var hVal_2_3 = document.getElementById('hVal_2_3');var mVal_2_3 = document.getElementById('mVal_2_3');var tVal_2_3 = document.getElementById('tVal_2_3');var hVal_3_3 = document.getElementById('hVal_3_3');var mVal_3_3 = document.getElementById('mVal_3_3');var tVal_3_3 = document.getElementById('tVal_3_3');var tVal_1_4 = document.getElementById('tVal_1_4');var hVal_2_4 = document.getElementById('hVal_2_4');var mVal_2_4 = document.getElementById('mVal_2_4');var tVal_2_4 = document.getElementById('tVal_2_4');var hVal_3_4 = document.getElementById('hVal_3_4');var mVal_3_4 = document.getElementById('mVal_3_4');var tVal_3_4 = document.getElementById('tVal_3_4');var tVal_1_5 = document.getElementById('tVal_1_5');var hVal_2_5 = document.getElementById('hVal_2_5');var mVal_2_5 = document.getElementById('mVal_2_5');var tVal_2_5 = document.getElementById('tVal_2_5');var hVal_3_5 = document.getElementById('hVal_3_5');var mVal_3_5 = document.getElementById('mVal_3_5');var tVal_3_5 = document.getElementById('tVal_3_5');var tVal_1_6 = document.getElementById('tVal_1_6');var hVal_2_6 = document.getElementById('hVal_2_6');var mVal_2_6 = document.getElementById('mVal_2_6');var tVal_2_6 = document.getElementById('tVal_2_6');var hVal_3_6 = document.getElementById('hVal_3_6');var mVal_3_6 = document.getElementById('mVal_3_6');var tVal_3_6 = document.getElementById('tVal_3_6');var tVal_1_7 = document.getElementById('tVal_1_7');var hVal_2_7 = document.getElementById('hVal_2_7');var mVal_2_7 = document.getElementById('mVal_2_7');var tVal_2_7 = document.getElementById('tVal_2_7');var hVal_3_7 = document.getElementById('hVal_3_7');var mVal_3_7 = document.getElementById('mVal_3_7');var tVal_3_7 = document.getElementById('tVal_3_7'); var msg = {type: = Storage,OffsetTemp: OffsetTemp.value,tVal_1_1: tVal_1_1.value,hVal_2_1: hVal_2_1.value,mVal_2_1: mVal_2_1.value,tVal_2_1: tVal_2_1.value,hVal_3_1: hVal_3_1.value,mVal_3_1: mVal_3_1.value,tVal_3_1: tVal_3_1.value,tVal_1_2: tVal_1_2.value,hVal_2_2: hVal_2_2.value,mVal_2_2: mVal_2_2.value,tVal_2_2: tVal_2_2.value,hVal_3_2: hVal_3_2.value,mVal_3_2: mVal_3_2.value,tVal_3_2: tVal_3_2.value,tVal_1_3: tVal_1_3.value,hVal_2_3: hVal_2_3.value,mVal_2_3: mVal_2_3.value,tVal_2_3: tVal_2_3.value,hVal_3_3: hVal_3_3.value,mVal_3_3: mVal_3_3.value,tVal_3_3: tVal_3_3.value,tVal_1_4: tVal_1_4.value,hVal_2_4: hVal_2_4.value,mVal_2_4: mVal_2_4.value,tVal_2_4: tVal_2_4.value,hVal_3_4: hVal_3_4.value,mVal_3_4: mVal_3_4.value,tVal_3_4: tVal_3_4.value,tVal_1_5: tVal_1_5.value,hVal_2_5: hVal_2_5.value,mVal_2_5: mVal_2_5.value,tVal_2_5: tVal_2_5.value,hVal_3_5: hVal_3_5.value,mVal_3_5: mVal_3_5.value,tVal_3_5: tVal_3_5.value,tVal_1_6: tVal_1_6.value,hVal_2_6: hVal_2_6.value,mVal_2_6: mVal_2_6.value,tVal_2_6: tVal_2_6.value,hVal_3_6: hVal_3_6.value,mVal_3_6: mVal_3_6.value,tVal_3_6: tVal_3_6.value,tVal_1_7: tVal_1_7.value,hVal_2_7: hVal_2_7.value,mVal_2_7: mVal_2_7.value,tVal_2_7: tVal_2_7.value,hVal_3_7: hVal_3_7.value,mVal_3_7: mVal_3_7.value,tVal_3_7: tVal_3_7.value};Socket.send(JSON.stringify(msg)); } function button_receive() { document.getElementById('OffsetTemp').value = 1; } function processCommand(event) {var obj = JSON.parse(event.data);var type = obj.type;if (type.localeCompare(\"WebUpdate\") == 0){document.getElementById('rand1').innerHTML = obj.rand1;document.getElementById('rand2').innerHTML = obj.rand2;document.getElementById('StatusCentrala').innerHTML = obj.StatusCentrala;document.getElementById('Program').innerHTML = obj.Program;document.getElementById('datetime').innerHTML = obj.datetime; }else if(type.localeCompare(\"WebUpdateData\") == 0) { document.getElementById('OffsetTemp = document.getElementById('OffsetTemp');document.getElementById('tVal_1_1.value').innerHTML = obj.tVal_1_1;document.getElementById('hVal_2_1.value').innerHTML = obj.tVal_2_1;document.getElementById('mVal_2_1.value').innerHTML = obj.tVal_2_1;document.getElementById('tVal_2_1.value').innerHTML = obj.tVal_2_1;document.getElementById('hVal_3_1.value').innerHTML = obj.tVal_3_1;document.getElementById('mVal_3_1.value').innerHTML = obj.tVal_3_1;document.getElementById('tVal_3_1.value').innerHTML = obj.tVal_3_1;document.getElementById('tVal_1_2.value').innerHTML = obj.tVal_1_2;document.getElementById('hVal_2_2.value').innerHTML = obj.tVal_2_2;document.getElementById('mVal_2_2.value').innerHTML = obj.tVal_2_2;document.getElementById('tVal_2_2.value').innerHTML = obj.tVal_2_2;document.getElementById('hVal_3_2.value').innerHTML = obj.tVal_3_2;document.getElementById('mVal_3_2.value').innerHTML = obj.tVal_3_2;document.getElementById('tVal_3_2.value').innerHTML = obj.tVal_3_2;document.getElementById('tVal_1_3.value').innerHTML = obj.tVal_1_3;document.getElementById('hVal_2_3.value').innerHTML = obj.tVal_2_3;document.getElementById('mVal_2_3.value').innerHTML = obj.tVal_2_3;document.getElementById('tVal_2_3.value').innerHTML = obj.tVal_2_3;document.getElementById('hVal_3_3.value').innerHTML = obj.tVal_3_3;document.getElementById('mVal_3_3.value').innerHTML = obj.tVal_3_3;document.getElementById('tVal_3_3.value').innerHTML = obj.tVal_3_3;document.getElementById('tVal_1_4.value').innerHTML = obj.tVal_1_4;document.getElementById('hVal_2_4.value').innerHTML = obj.tVal_2_4;document.getElementById('mVal_2_4.value').innerHTML = obj.tVal_2_4;document.getElementById('tVal_2_4.value').innerHTML = obj.tVal_2_4;document.getElementById('hVal_3_4.value').innerHTML = obj.tVal_3_4;document.getElementById('mVal_3_4.value').innerHTML = obj.tVal_3_4;document.getElementById('tVal_3_4.value').innerHTML = obj.tVal_3_4;document.getElementById('tVal_1_5.value').innerHTML = obj.tVal_1_5;document.getElementById('hVal_2_5.value').innerHTML = obj.tVal_2_5;document.getElementById('mVal_2_5.value').innerHTML = obj.tVal_2_5;document.getElementById('tVal_2_5.value').innerHTML = obj.tVal_2_5;document.getElementById('hVal_3_5.value').innerHTML = obj.tVal_3_5;document.getElementById('mVal_3_5.value').innerHTML = obj.tVal_3_5;document.getElementById('tVal_3_5.value').innerHTML = obj.tVal_3_5;document.getElementById('tVal_1_6.value').innerHTML = obj.tVal_1_6;document.getElementById('hVal_2_6.value').innerHTML = obj.tVal_2_6;document.getElementById('mVal_2_6.value').innerHTML = obj.tVal_2_6;document.getElementById('tVal_2_6.value').innerHTML = obj.tVal_2_6;document.getElementById('hVal_3_6.value').innerHTML = obj.tVal_3_6;document.getElementById('mVal_3_6.value').innerHTML = obj.tVal_3_6;document.getElementById('tVal_3_6.value').innerHTML = obj.tVal_3_6;document.getElementById('tVal_1_7.value').innerHTML = obj.tVal_1_7;document.getElementById('hVal_2_7.value').innerHTML = obj.tVal_2_7;document.getElementById('mVal_2_7.value').innerHTML = obj.tVal_2_7;document.getElementById('tVal_2_7.value').innerHTML = obj.tVal_2_7;document.getElementById('hVal_3_7.value').innerHTML = obj.tVal_3_7;document.getElementById('mVal_3_7.value').innerHTML = obj.tVal_3_7;document.getElementById('tVal_3_7.value').innerHTML = obj.tVal_3_7; } window.onload = function(event) { init(); }</script></html>";

// The JSON library uses static memory, so this will need to be allocated:
StaticJsonDocument<2000> doc_tx;                       // provision memory for about 200 characters
StaticJsonDocument<2000> doc_rx;

// We want to periodically send values to the clients, so we need to define an "interval" and remember the last time we sent data to the client (with "previousMillis")
int interval = 1000;                                  // send data to the client every 1000ms -> 1s
unsigned long previousMillis = 0;                     // we use the "millis()" command for time reference and this will output an unsigned long

// Initialization of webserver and websocket
WebServer server(80);                                 // the server uses port 80 (standard port for websites
WebSocketsServer webSocket = WebSocketsServer(81);    // the websocket uses port 81 (standard port for websockets
int Centrala = 0;
int StatusCentrala = 0;
float OffsetTemp = 1.5;
float Temp, Hum;
int Program;
char datetime[40];
void WebSoketUpdate (){
  server.handleClient();                              // Needed for the webserver to handle all clients
  webSocket.loop();                                   // Update function for the webSockets 
  unsigned long now = millis();                       // read out the current "time" ("millis()" gives the time in ms since the Arduino started)
  if ((unsigned long)(now - previousMillis) > interval) { // check if "interval" ms has passed since last time the clients were updated
    String WebUpdate = "WebUpdate";
    String jsonString = "";                           // create a JSON string for sending data to the client
    JsonObject object = doc_tx.to<JsonObject>();      // create a JSON Object
    object["type"] = WebUpdate;
    object["rand1"] = Temp;                    // write data into the JSON object -> I used "rand1" and "rand2" here, but you can use anything else
    object["rand2"] = Hum;
    object["StatusCentrala"] = StatusCentrala;
    object["datetime"]= datetime;
    object["Program"]= Program;
    serializeJson(doc_tx, jsonString);                // convert JSON object to string
    Serial.println(jsonString);                       // print JSON string to console for debug purposes (you can comment this out)
    webSocket.broadcastTXT(jsonString);               // send JSON string to clients
    previousMillis = now;                             // reset previousMillis
  }
}

int hVal_2_1, mVal_2_1, hVal_3_1, mVal_3_1,hVal_2_2, mVal_2_2, hVal_3_2, mVal_3_2, hVal_2_3, mVal_2_3,  hVal_3_3, mVal_3_3, hVal_2_4, mVal_2_4, hVal_3_4, mVal_3_4, hVal_2_5, mVal_2_5, hVal_3_5, mVal_3_5, hVal_2_6, mVal_2_6, hVal_3_6, mVal_3_6, hVal_2_7, mVal_2_7, hVal_3_7, mVal_3_7;                                          // global variable 
float tVal_1_1, tVal_2_1, tVal_3_1, tVal_1_2, tVal_2_2, tVal_3_2, tVal_1_3, tVal_2_3, tVal_3_3, tVal_1_4, tVal_2_4, tVal_3_4, tVal_1_5, tVal_2_5, tVal_3_5, tVal_1_6, tVal_2_6, tVal_3_6, tVal_1_7, tVal_2_7, tVal_3_7;

void DataStorageUpdate(uint16_t int_address, uint16_t f_address){
  //Crate a int Array
  int n[28] = {hVal_2_1, mVal_2_1, hVal_3_1, mVal_3_1,hVal_2_2, mVal_2_2, hVal_3_2, mVal_3_2, hVal_2_3, mVal_2_3,  hVal_3_3, mVal_3_3, hVal_2_4, mVal_2_4, hVal_3_4, mVal_3_4, hVal_2_5, mVal_2_5, hVal_3_5, mVal_3_5, hVal_2_6, mVal_2_6, hVal_3_6, mVal_3_6, hVal_2_7, mVal_2_7, hVal_3_7, mVal_3_7};  
  //Create a float Array
  float m[22] = {OffsetTemp, tVal_1_1, tVal_2_1, tVal_3_1, tVal_1_2, tVal_2_2, tVal_3_2, tVal_1_3, tVal_2_3, tVal_3_3, tVal_1_4, tVal_2_4, tVal_3_4, tVal_1_5, tVal_2_5, tVal_3_5, tVal_1_6, tVal_2_6, tVal_3_6, tVal_1_7, tVal_2_7, tVal_3_7};
  for (int i = 0; i < 28; i++)
  {
    EEPROM_UpdateInt(int_address, n[i]);
    int_address += 4;
  }

  Serial.println("Written data int:");
  //Serial.println(final);

  for (int i = 0; i < 22; i++)
  {
    EEPROM_UpdateFloat(f_address, m[i]);
    f_address += 4;
  }
  Serial.println("Written data Float:");
}

void DataStorageRead(uint16_t int_address, uint16_t f_address){
  //Crate a int Array
  int n[28]; // = {hVal_2_1, mVal_2_1, hVal_3_1, mVal_3_1,hVal_2_2, mVal_2_2, hVal_3_2, mVal_3_2, hVal_2_3, mVal_2_3,  hVal_3_3, mVal_3_3, hVal_2_4, mVal_2_4, hVal_3_4, mVal_3_4, hVal_2_5, mVal_2_5, hVal_3_5, mVal_3_5, hVal_2_6, mVal_2_6, hVal_3_6, mVal_3_6, hVal_2_7, mVal_2_7, hVal_3_7, mVal_3_7};  
  //Create a float Array
  float m[22]; // = {OffsetTemp, tVal_1_1, tVal_2_1, tVal_3_1, tVal_1_2, tVal_2_2, tVal_3_2, tVal_1_3, tVal_2_3, tVal_3_3, tVal_1_4, tVal_2_4, tVal_3_4, tVal_1_5, tVal_2_5, tVal_3_5, tVal_1_6, tVal_2_6, tVal_3_6, tVal_1_7, tVal_2_7, tVal_3_7};
  for (int i = 0; i < 28; i++)
  {
    n[i] = eep.read(int_address);
    int_address += 4;
  }
  for (int i = 0; i < 22; i++)
  {
    m[i] = EEPROM_ReadFloat(f_address);
    f_address += 4;
   
  }

  hVal_2_1 = n[0];
  mVal_2_1 = n[1];
  hVal_3_1 = n[2];
  mVal_3_1 = n[3];
  hVal_2_2 = n[4];
  mVal_2_2 = n[5];
  hVal_3_2 = n[6];
  mVal_3_2 = n[7];
  hVal_2_3 = n[8];
  mVal_2_3 = n[9];
  hVal_3_3 = n[10];
  mVal_3_3 = n[11];
  hVal_2_4 = n[12];
  mVal_2_4 = n[13];
  hVal_3_4 = n[14];
  mVal_3_4 = n[15];
  hVal_2_5 = n[16];
  mVal_2_5 = n[17]; 
  hVal_3_5 = n[18];
  mVal_3_5 = n[19];
  hVal_2_6 = n[20];
  mVal_2_6 = n[21];
  hVal_3_6 = n[22];
  mVal_3_6 = n[23];
  hVal_2_7 = n[24];
  mVal_2_7 = n[25];
  hVal_3_7 = n[26];
  mVal_3_7 = n[27];

  OffsetTemp = m[0];
  tVal_1_1 = m[1];
  tVal_2_1 = m[2];
  tVal_3_1 = m[3];
  tVal_1_2 = m[4];
  tVal_2_2 = m[5];
  tVal_3_2 = m[6];
  tVal_1_3 = m[7];
  tVal_2_3 = m[8];
  tVal_3_3 = m[9];
  tVal_1_4 = m[10];
  tVal_2_4 = m[11];
  tVal_3_4 = m[12];
  tVal_1_5 = m[13];
  tVal_2_5 = m[14];
  tVal_3_5 = m[15];
  tVal_1_6 = m[16];
  tVal_2_6 = m[17];
  tVal_3_6 = m[18];
  tVal_1_7 = m[19];
  tVal_2_7 = m[20];
  tVal_3_7 = m[21];

  Serial.println( hVal_2_5);
  Serial.println( mVal_2_5);
  Serial.println( hVal_3_5);
  Serial.println( mVal_3_5);
  Serial.println( tVal_1_5);
  Serial.println( tVal_2_5);
  Serial.println( tVal_3_5);

}

void webSocketEvent(byte num, WStype_t type, uint8_t * payload, size_t length) {      // the parameters of this callback function are always the same -> num: id of the client who send the event, type: type of message, payload: actual data sent and length: length of payload
  switch (type) {                                     // switch on the type of information sent
    case WStype_DISCONNECTED:                         // if a client is disconnected, then type == WStype_DISCONNECTED
      Serial.println("Client " + String(num) + " disconnected" + String(type));
      break;
    case WStype_CONNECTED:                            // if a client is connected, then type == WStype_CONNECTED
      Serial.println("Client " + String(num) + " connected " + String(type));
      WebSoketUpdate ();
      // optionally you can add code here what to do when connected
      break;
    case WStype_FRAGMENT_TEXT_START:
      Serial.println("WStype_FRAGMENT_TEXT_START");
      break;
    case WStype_BIN:
      Serial.println("WStype_BIN");
      break;
    case WStype_ERROR:
      Serial.println("WStype_ERROR");
      break;
    case WStype_FRAGMENT_BIN_START:
      Serial.println("WStype_FRAGMENT_BIN_START");
      break;
    case WStype_FRAGMENT:
      Serial.println("WStype_FRAGMENT");
      break;
    case WStype_FRAGMENT_FIN:
      Serial.println("WStype_FRAGMENT_FIN");
      break;
    case WStype_PING:
       Serial.println("WStype_PING");
      break;
    case WStype_PONG:
       Serial.println("WStype_PONG");
      break;
    case WStype_TEXT:                                 // if a client has sent data, then type == WStype_TEXT
      // try to decipher the JSON string received
      DeserializationError error = deserializeJson(doc_rx, payload);
      if (error) {
        Serial.print(F("deserializeJson() failed: "));
        Serial.println(error.f_str());
        return;
      }
      else {
        // JSON string was received correctly, so information can be retrieved:
         const char* l_type = doc_rx["type"];
        if (String(l_type) == "Storage")
        {             
        OffsetTemp = doc_rx["OffsetTemp"];
        tVal_1_1 = doc_rx["tVal_1_1"];
        hVal_2_1 = doc_rx["hVal_2_1"];
        mVal_2_1 = doc_rx["mVal_2_1"];
        tVal_2_1 = doc_rx["tVal_2_1"];
        hVal_3_1 = doc_rx["hVal_3_1"];
        mVal_3_1 = doc_rx["mVal_3_1"];
        tVal_3_1 = doc_rx["tVal_3_1"];
        tVal_1_2 = doc_rx["tVal_1_2"];
        hVal_2_2 = doc_rx["hVal_2_2"];
        mVal_2_2 = doc_rx["mVal_2_2"];
        tVal_2_2 = doc_rx["tVal_2_2"];
        hVal_3_2 = doc_rx["hVal_3_2"];
        mVal_3_2 = doc_rx["mVal_3_2"];
        tVal_3_2 = doc_rx["tVal_3_2"];
        tVal_1_3 = doc_rx["tVal_1_3"];
        hVal_2_3 = doc_rx["hVal_2_3"];
        mVal_2_3 = doc_rx["mVal_2_3"];
        tVal_2_3 = doc_rx["tVal_2_3"];
        hVal_3_3 = doc_rx["hVal_3_3"];
        mVal_3_3 = doc_rx["mVal_3_3"];
        tVal_3_3 = doc_rx["tVal_3_3"];
        tVal_1_4 = doc_rx["tVal_1_4"];
        hVal_2_4 = doc_rx["hVal_2_4"];
        mVal_2_4 = doc_rx["mVal_2_4"];
        tVal_2_4 = doc_rx["tVal_2_4"];
        hVal_3_4 = doc_rx["hVal_3_4"];
        mVal_3_4 = doc_rx["mVal_3_4"];
        tVal_3_4 = doc_rx["tVal_3_4"];
        tVal_1_5 = doc_rx["tVal_1_5"];
        hVal_2_5 = doc_rx["hVal_2_5"];
        mVal_2_5 = doc_rx["mVal_2_5"];
        tVal_2_5 = doc_rx["tVal_2_5"];
        hVal_3_5 = doc_rx["hVal_3_5"];
        mVal_3_5 = doc_rx["mVal_3_5"];
        tVal_3_5 = doc_rx["tVal_3_5"];
        tVal_1_6 = doc_rx["tVal_1_6"];
        hVal_2_6 = doc_rx["hVal_2_6"];
        mVal_2_6 = doc_rx["mVal_2_6"];
        tVal_2_6 = doc_rx["tVal_2_6"];
        hVal_3_6 = doc_rx["hVal_3_6"];
        mVal_3_6 = doc_rx["mVal_3_6"];
        tVal_3_6 = doc_rx["tVal_3_6"];
        tVal_1_7 = doc_rx["tVal_1_7"];
        hVal_2_7 = doc_rx["hVal_2_7"];
        mVal_2_7 = doc_rx["mVal_2_7"];
        tVal_2_7 = doc_rx["tVal_2_7"];
        hVal_3_7 = doc_rx["hVal_3_7"];
        mVal_3_7 = doc_rx["mVal_3_7"];
        tVal_3_7 = doc_rx["tVal_3_7"];
        
        Serial.println("Received Data from user: " + String(num));
        Serial.println("OffsetTemp: " + String(OffsetTemp));
        Serial.println("tVal_1_1: " + String(tVal_1_1));
        Serial.println("hVal_2_1: " + String(hVal_2_1));
        Serial.println("mVal_2_1: " + String(mVal_2_1));
        Serial.println("tVal_2_1: " + String(tVal_2_1));
        Serial.println("hVal_3_1: " + String(hVal_3_1));
        Serial.println("mVal_3_1: " + String(mVal_3_1));
        Serial.println("tVal_3_1: " + String(tVal_3_1));
      
        Serial.println("");
        DataStorageUpdate(0, 130);
  
        };
        if(String(l_type) == "Request"){
          server.handleClient();
          String WebUpdate = "WebUpdate";
          String jsonString = "";
          JsonObject object = doc_tx.to<JsonObject>();      // create a JSON Object
          object["OffsetTemp"] = OffsetTemp;
           
          serializeJson(doc_tx, jsonString);                // convert JSON object to string
          Serial.println(jsonString);                       // print JSON string to console for debug purposes (you can comment this out)
          webSocket.broadcastTXT(jsonString);               // send JSON string to clients
        }
      }  
    break;
  }
}

//////////////////////////////Global Time Management////////////////////////////////////////

//internet access for NTP
const char * ntpServer = "pool.ntp.org";
//timezone GTM set
const long gmtOffset_sec = 7200;
//offset for daylaight saving
const int daylightOffset_sec = 3600;
//Constant for time 

char fullTimeHour[12];
char timeWeekDay[10];
char n_week_day[2] = " ";
char timeHour[3] = " ";
char timeMin[3] = " ";
//Format the time received
void printLocalTime() {
  struct tm timeinfo;
  if (!getLocalTime( & timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }
  Serial.println( & timeinfo, "%A, %B %d %Y %H:%M:%S");
  strftime(datetime, 40, "%A, %B %d %Y %H:%M:%S", & timeinfo);
  //Serial.println("Time variables");
  strftime(fullTimeHour, 12, "%H:%M", & timeinfo);
  Serial.println(fullTimeHour);
  //strftime(timeWeekDay,10, "%A", &timeinfo);
  //Serial.println(timeWeekDay);
  strftime(n_week_day, 2, "%u", & timeinfo);
  //Serial.println(n_week_day);
  strftime(timeHour, 3, "%H", & timeinfo);
  //Serial.println(timeHour);
  strftime(timeMin, 4, "%M", & timeinfo);
  //Serial.println(timeMin);
  //Serial.println();
}

//////////////////////////////////Global ESP-NOW Settings/////////////////////////////////////////////

// REPLACE WITH YOUR RECEIVER MAC Address
uint8_t broadcastAddress[] = {
  0x7C,
  0x9E,
  0xBD,
  0xE3,
  0xB2,
  0xCC
};

// Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
  int id;
  float temp;
  float hum;
  unsigned int readingId;
}
struct_message;

// Create a struct_message called myData
struct_message myData;

// callback when data is sent
void OnDataSent(const uint8_t * mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}
// callback function that will be executed when data is received
void OnDataRecv(const uint8_t * mac_addr, const uint8_t *incomingData, int len) { 
  // Copies the sender mac address to a string
 
  char macStr[18];
  Serial.print("Packet received from: ");
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  Serial.println(macStr);
  memcpy(&myData, incomingData, sizeof(myData));
  //Serial.print("Bytes received: ");
  //Serial.println(len);
  //Serial.print("Sendre ID: ");
  //Serial.println(myData.id);
  Temp = myData.temp;
  //Serial.print("Temperature: ");
  //Serial.println(myData.temp);
  Hum = myData.hum;
  //Serial.print("Humidity: ");
  //Serial.println(myData.hum);
  //Serial.print("Packets Send: ");
  //Serial.println(myData.id);
  //Serial.println();
}

// Programing time interval
  
  int ActivationCondition(const int timeStart,
  const int timeStartM,
  const int timeEnd,
  const int timeEndM) {
  bool StartFlag = false;
  bool StopFlag = false;
  

  if (atoi(& timeHour[0]) > timeStart)
  {
    StartFlag = true;
  }
  else if (atoi(& timeHour[0]) == timeStart)
  {
    if (atoi( & timeMin[0]) >= timeStartM)
    {
      StartFlag = true;
    }
  }
  else
  {
    StartFlag = false;
  }
  
    if (atoi(& timeHour[0]) < timeEnd)
  {
    StopFlag = true;
  }
  else if (atoi(& timeHour[0]) == timeEnd)
  {
    if (atoi( & timeMin[0]) <= timeEndM)
    {
      StopFlag = true;
    }
  }
  else
  {
    StopFlag = false;
  }

  if (StartFlag == true && StopFlag == true) {
    return 1;
  } else {
    return 0;

  }
  
}

  void espSendData() {
    // Send message via ESP-NOW
    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t * ) & myData, sizeof(myData));
    if (result == ESP_OK) {
     Serial.println("Sent with success");
    } else {
     Serial.println("Error sending the data");
    }
  }
//////////////////////////////// Aditional Functions ///////////////////////////////////

const int timeMinus(const int time_A){
if (time_A == 00){
 return 00;
}else{return (time_A-1);}
}

const int timePlus(const int time_A){
if (time_A == 59){
 return 59;
}else{return (time_A+1);}
}

/////////////////////////////////////////////Setup/////////////////////////////////////////

void setup() {

  // Init Serial Monitor
  Serial.begin(115200);
  
  DataStorageRead(0, 130);
  // Connect to Wi-Fi
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  Serial.println("Establishing connection to WiFi with SSID: " + String(ssid));     // print SSID to the serial interface for debugging

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.print("Connected to network with IP address: ");
  Serial.println(WiFi.localIP());                     // show IP address that the ESP32 has received from router
  Serial.print("Wi-Fi Channel: ");
  Serial.println(WiFi.channel());

  // Init and get the time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  printLocalTime();

  server.on("/", []() {                               // define here wat the webserver needs to do
    server.send(200, "text/html", webpage);           //    -> it needs to send out the HTML string "webpage" to the client
  });
  server.begin();                                     // start server
  
  webSocket.begin();                                  // start websocket
  webSocket.onEvent(webSocketEvent);                  // define a callback function -> what does the ESP32 need to do when an event from the websocket is received? -> run function "webSocketEvent()"


  WiFi.mode(WIFI_AP_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  //esp_now_register_send_cb(OnDataSent);
  esp_now_register_recv_cb(OnDataRecv);
  // Register peer
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  // Add peer        
  if (esp_now_add_peer( & peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
}

void loop() {
  WebSoketUpdate ();
  printLocalTime();
  //espSendData();
  
  switch (atoi( & n_week_day[0])) {
  case 1:
    Serial.println("E ziua 1 Luni");
    WebSoketUpdate ();
    if (ActivationCondition(00, 00, hVal_2_1, mVal_2_1) == 1) {
      if (Temp < tVal_1_1-OffsetTemp){
        while (Temp < tVal_1_1 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dimineata");
      Program = 1;
    } else if (ActivationCondition(hVal_2_1, timePlus(mVal_2_1), hVal_3_1, mVal_3_1) == 1) {
      if (Temp < tVal_2_1-OffsetTemp){
        while (Temp < tVal_2_1 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dupamasa");
      Program = 2;
    } else if (ActivationCondition(hVal_3_1, timePlus(mVal_3_1), 23, 59) == 1) {
      if (Temp < tVal_3_1-OffsetTemp){
        while (Temp < tVal_3_1 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Seara");
      Program = 3;
    } else {
      Serial.println("Valoare nedefinita in <> if");
    }
    break;
  case 2:
    Serial.println("E ziua 2 Marti");
    WebSoketUpdate ();
    if (ActivationCondition(00, 00, hVal_2_2, mVal_2_2) == 1) {
      if (Temp < tVal_1_2-OffsetTemp){
        while (Temp < tVal_1_2 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dimineata");
      Program = 1;
    } else if (ActivationCondition(hVal_2_2, timePlus(mVal_2_2), hVal_3_2, mVal_3_2) == 1) {
      if (Temp < tVal_2_2-OffsetTemp){
        while (Temp < tVal_2_2 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dupamasa");
      Program = 2;
    } else if (ActivationCondition(hVal_3_2, timePlus(mVal_3_2), 23, 59) == 1) {
      if (Temp < tVal_3_2-OffsetTemp){
        while (Temp < tVal_3_2 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Seara");
      Program = 3;
    } else {
      Serial.println("Valoare nedefinita in <> if");
    }
    break;
  case 3:
    Serial.println("E ziua 3 Miercuri");
    WebSoketUpdate ();
    if (ActivationCondition(00, 00, hVal_2_3, mVal_2_3) == 1) {
      if (Temp < tVal_1_3-OffsetTemp){
        while (Temp < tVal_1_3 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
          }
      }else {StatusCentrala = 0;}
      Serial.println("Dimineata");
      Program = 1;
    } else if (ActivationCondition(hVal_2_3, timePlus(mVal_2_3), hVal_3_3, mVal_3_3) == 1) {
      if (Temp < tVal_2_3-OffsetTemp){
        while (Temp < tVal_2_3 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);          
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dupamasa");
      Program = 2;
    } else if (ActivationCondition(hVal_3_3, timePlus(mVal_3_3), 23, 59) == 1) {
      if (Temp < tVal_3_3-OffsetTemp){
        while (Temp < tVal_3_3 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);         
        }
      }else {StatusCentrala = 0;}
      Serial.println("Seara");
      Program = 3;
    } else {
      Serial.println("Valoare nedefinita in <> if");
    }
    break;
  case 4:
    Serial.println("E ziua 4 Joi");
    WebSoketUpdate ();
    if (ActivationCondition(00, 00, hVal_2_4, mVal_2_4) == 1) {
      if (Temp < tVal_1_4-OffsetTemp){
        while (Temp < tVal_1_4 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dimineata");
      Program = 1;
    } else if (ActivationCondition(hVal_2_4, timePlus(mVal_2_4), hVal_3_4, mVal_3_4) == 1) {
      if (Temp < tVal_2_4-OffsetTemp){
        while (Temp < tVal_2_4 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dupamasa");
      Program = 2;
    } else if (ActivationCondition(hVal_3_4, timePlus(mVal_3_4), 23, 59) == 1) {
      if (Temp < tVal_3_4-OffsetTemp){
        while (Temp < tVal_3_4 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Seara");
      Program = 3;
    } else {
      Serial.println("Valoare nedefinita in <> if");
    }
    break;
  case 5:
    Serial.println("E ziua 5 Vineri");
    WebSoketUpdate ();
    if (ActivationCondition(00, 00, hVal_2_5, mVal_2_5) == 1) {
      if (Temp < tVal_1_5-OffsetTemp){
        while (Temp < tVal_1_5 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dimineata");
      Program = 1;
    } else if (ActivationCondition(hVal_2_5, timePlus(mVal_2_5), hVal_3_5, mVal_3_5) == 1) {
      if (Temp < tVal_2_5-OffsetTemp){
        while (Temp < tVal_2_5 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dupamasa");
      Program = 2;
    } else if (ActivationCondition(hVal_3_5, timePlus(mVal_3_5), 23, 59) == 1) {
      if (Temp < tVal_3_5-OffsetTemp){
        while (Temp < tVal_3_5 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Seara");
      Program = 3;
    } else {
      Serial.println("Valoare nedefinita in <> if");
    }
    break;
  case 6:
    Serial.println("E ziua 6 Sambata");
    WebSoketUpdate ();
    if (ActivationCondition(00, 00, hVal_2_6, mVal_2_6) == 1) {
      if (Temp < tVal_1_6-OffsetTemp){
        while (Temp < tVal_1_6 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dimineata");
      Program = 1;
    } else if (ActivationCondition(hVal_2_6, timePlus(mVal_2_6), hVal_3_6, mVal_3_6) == 1) {
      if (Temp < tVal_2_6-OffsetTemp){
        while (Temp < tVal_2_6 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dupamasa");
      Program = 2;
    } else if (ActivationCondition(hVal_3_6, timePlus(mVal_3_6), 23, 59) == 1) {
      if (Temp < tVal_3_6-OffsetTemp){
        while (Temp < tVal_3_6 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Seara");
      Program = 3;
    } else {
      Serial.println("Valoare nedefinita in <> if");
    }
    break;
  case 7:
    Serial.println("E ziua 7 Duminica");
    WebSoketUpdate ();
    if (ActivationCondition(00, 00, hVal_2_7, mVal_2_7) == 1) {
      if (Temp < tVal_1_7-OffsetTemp){
        while (Temp < tVal_1_7 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dimineata");
      Program = 1;
    } else if (ActivationCondition(hVal_2_7, timePlus(mVal_2_7), hVal_3_7, mVal_3_7) == 1) {
      if (Temp < tVal_2_7-OffsetTemp){
        while (Temp < tVal_2_7 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Dupamasa");
      Program = 2;
    } else if (ActivationCondition(hVal_3_7, timePlus(mVal_3_7), 23, 59) == 1) {
      if (Temp < tVal_3_7-OffsetTemp){
        while (Temp < tVal_3_7 + OffsetTemp){
          StatusCentrala = 1;
          WebSoketUpdate ();
          printLocalTime();
          delay(1000);
        }
      }else {StatusCentrala = 0;}
      Serial.println("Seara");
      Program = 3;
    } else {
      Serial.println("Valoare nedefinita in <> if");
    }
    break;
  default:
    Serial.println("Nu e definita valoare in Case");
    WebSoketUpdate ();
    break;
  }
  
  delay(1000);
  
}